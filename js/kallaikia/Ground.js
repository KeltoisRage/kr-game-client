Kallaikia.Ground = function (game) {
	this.game = game;
}

Kallaikia.Ground.prototype = Object.create(Kallaikia.Component.prototype);

Kallaikia.Ground.prototype.loadContent = function () {
	/* AmbientLight */
	this.game.getScene().add( new THREE.AmbientLight( 0xffffff ) );

	var light = new THREE.SpotLight( 0xffffff, 2, 4000 );
	light.position.set( 200, 200, 500 );

	/* AmbientLight: Cast Shadow */
	light.castShadow = true;

	/* AmbientLight: Shadow Mapping */
	/*
		light.shadowMapWidth = 1024;
		light.shadowMapHeight = 1024;
	*/
	light.shadow.mapSize.width = 1024;
	light.shadow.mapSize.height = 1024;

	/* Shadow Darkness */
	light.shadowMapDarkness = 0.85;

	/* DEBUG ONLY: Setup Camera Helper */
	var camhelper = new THREE.CameraHelper( light.shadow.camera );
	this.game.getScene().add( camhelper );

	/* Add light */
	this.game.getScene().add( light );

	/* Ground Texture */
	var loader = new THREE.TextureLoader();
  var texture = loader.load( "assets/textures/terrain/grasslight-big.jpg" );
	var geometry = new THREE.PlaneGeometry(16000, 16000);
	var material = new THREE.MeshBasicMaterial({ map: texture });

  // it's necessary to apply these settings in order to correctly display the texture on a shape geometry
  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
  texture.repeat.set( 0.008, 0.008 );

	// flat shape with texture
	function addShape( shape, extrudeSettings, color, x, y, z, rx, ry, rz, s ) {

		// note: default UVs generated by ShapeBufferGemoetry are simply the x- and y-coordinates of the vertices
		var geometry = new THREE.ShapeBufferGeometry( shape );

		this.ground = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial( { side: THREE.DoubleSide, map: texture } ) );
		this.ground.position.set( x, y, z - 175 );
		this.ground.rotation.set( rx, ry, rz );
		this.ground.scale.set( s, s, s );

		this.ground.receiveShadow = true;

		group.add( this.ground );

		/*
		this.ground = new THREE.Mesh( geometry, material);
		this.ground.rotation.x = - Math.PI / 2;
		this.ground.material.map.repeat.set(64, 64);
		this.ground.material.map.wrapS = this.ground.material.map.wrapT = THREE.RepeatWrapping;
		this.ground.receiveShadow = true;
		*/

		this.game.getScene().add(this.ground);
	}
};
